version: "3.8"

services:
  redis:
    image: redis:5
    command: redis-server --port 6379
    ports:
      - 6379:6379
      
  nginx:
    build: ./_nginx
    ports:
      - 80:80
      - 10000:10000
      - 10001:10001
      - 10002:10002
      - 10003:10003
      - 10004:10004
      - 10005:10005
      
    depends_on:
      - auth_service
      - lookup_service
      - seller_service
      - payment_service
      - search_service

  auth_service:
    build: ./AuthService/
    command: gunicorn AuthService.wsgi:application --bind 0.0.0.0:8000
    ports:
      - 8000:8000
    working_dir: /AuthService/
    expose:
      - 8000
    env_file:
      - ./AuthService/.local.env

  lookup_service:
    build: ./LookupService/
    command: gunicorn LookupService.wsgi:application --bind 0.0.0.0:8001
    ports:
      - 8001:8001
    working_dir: /LookupService/
    expose:
      - 8001
    env_file:
      - ./LookupService/.local.env

  seller_service:
    build: ./SellerService/
    command: gunicorn SellerService.wsgi:application --bind 0.0.0.0:8002
    ports:
      - 8002:8002
    working_dir: /SellerService/
    expose:
      - 8002
    env_file:
      - ./SellerService/.local.env

  search_service:
    build: ./SearchService/
    command: gunicorn SearchService.wsgi:application --bind 0.0.0.0:8003
    ports:
      - 8003:8003
    working_dir: /SearchService/
    expose:
      - 8003
    env_file:
      - ./SearchService/.local.env

  payment_service:
    container_name: spring
    build: ./PaymentService/payment/
    ports:
      - 8080:8080
    expose:
      - 8080
    env_file:
     - ./PaymentService/payment/.pro.env
    environment:
      - SPRING_DATASOURCE_DIVER-CLASS-NAME=org.postgresql.Driver
      - SPRING_DATASOURCE_PLATFORM=postgres
      - SPRING.JPA.SHOW.SQL=true
      - SPRING.JPA.DATABASE=postgresql
      - SPRING.JPA.PROPERTIES.HIBERNATE.FORMAT_SQL=true
      - SPRING.JPA.DATABASE-PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SPRING.JPA.GENERATE-DDL=true
      - SPRING.JPA.HIBERNATE.DDL-AUTO=validate    

  chatting_services:
    node:
      build: .
      volumes:
        - .:/ChattingService
      working_dir: /ChattingService
      ports:
        - 8008:8008
      command: node app.js
      restart: always